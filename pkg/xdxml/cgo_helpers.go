// WARNING: This file has automatically been generated on Wed, 03 Apr 2024 16:47:49 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package xdxml

/*
#cgo LDFLAGS: -Wl,--unresolved-symbols=ignore-in-object-files
#include "xdxml.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Node_path) Ref() *C.node_path_st {
	if x == nil {
		return nil
	}
	return (*C.node_path_st)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Node_path) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewNode_pathRef converts the C object reference into a raw struct reference without wrapping.
func NewNode_pathRef(ref unsafe.Pointer) *Node_path {
	return (*Node_path)(ref)
}

// NewNode_path allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewNode_path() *Node_path {
	return (*Node_path)(allocNode_pathMemory(1))
}

// allocNode_pathMemory allocates memory for type C.node_path_st in C.
// The caller is responsible for freeing the this memory via C.free.
func allocNode_pathMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfNode_pathValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfNode_pathValue = unsafe.Sizeof([1]C.node_path_st{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Node_path) PassRef() *C.node_path_st {
	if x == nil {
		x = (*Node_path)(allocNode_pathMemory(1))
	}
	return (*C.node_path_st)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Device) Ref() *C.xdx_device_t {
	if x == nil {
		return nil
	}
	return (*C.xdx_device_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Device) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewDeviceRef converts the C object reference into a raw struct reference without wrapping.
func NewDeviceRef(ref unsafe.Pointer) *Device {
	return (*Device)(ref)
}

// NewDevice allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewDevice() *Device {
	return (*Device)(allocDeviceMemory(1))
}

// allocDeviceMemory allocates memory for type C.xdx_device_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocDeviceMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfDeviceValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfDeviceValue = unsafe.Sizeof([1]C.xdx_device_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Device) PassRef() *C.xdx_device_t {
	if x == nil {
		x = (*Device)(allocDeviceMemory(1))
	}
	return (*C.xdx_device_t)(unsafe.Pointer(x))
}
